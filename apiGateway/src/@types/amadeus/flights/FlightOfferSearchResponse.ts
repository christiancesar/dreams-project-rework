// Generated by https://quicktype.io
//
// To change quicktype's target language, run command:
//
//   "Set quicktype target language"

export interface FlightOfferSearchResponse {
  data: FlightOffer[];
}

export interface FlightOffer {
  type:                     string;
  id:                       string;
  source:                   string;
  instantTicketingRequired: boolean;
  nonHomogeneous:           boolean;
  oneWay:                   boolean;
  lastTicketingDate:        string;
  numberOfBookableSeats:    number;
  itineraries:              Itinerary[];
  price:                    Price;
  pricingOptions:           PricingOptions;
  validatingAirlineCodes:   string[];
  travelerPricings:         TravelerPricing[];
}

export interface Itinerary {
  duration: string;
  segments: Segment[];
}

export interface Segment {
  departure:       Arrival;
  arrival:         Arrival;
  carrierCode:     string;
  number:          string;
  aircraft:        Aircraft;
  operating:       Operating;
  duration:        string;
  id:              string;
  numberOfStops:   number;
  blacklistedInEU: boolean;
}

export interface Aircraft {
  code: string;
}

export interface Arrival {
  iataCode: string;
  at:       string;
}

export interface Operating {
  carrierCode: string;
}

export interface Price {
  currency:   Currency;
  total:      string;
  base:       string;
  fees:       Fee[];
  grandTotal: string;
}

export enum Currency {
  Brl = "BRL",
}

export interface Fee {
  amount: string;
  type:   string;
}

export interface PricingOptions {
  fareType:                string[];
  includedCheckedBagsOnly: boolean;
}

export interface TravelerPricing {
  travelerId:           string;
  fareOption:           FareOption;
  travelerType:         TravelerType;
  price:                TravelerPricingPrice;
  fareDetailsBySegment: FareDetailsBySegment[];
  associatedAdultId?:   string;
}

export interface FareDetailsBySegment {
  segmentId:            string;
  cabin:                Cabin;
  fareBasis:            FareBasis;
  brandedFare:          BrandedFare;
  class:                Class;
  includedCheckedBags?: IncludedCheckedBags;
}

export enum BrandedFare {
  Azul = "AZUL",
}

export enum Cabin {
  Economy = "ECONOMY",
}

export enum Class {
  F = "F",
  G = "G",
}

export enum FareBasis {
  Feebfz4L = "FEEBFZ4L",
  Glebfz4L = "GLEBFZ4L",
}

export interface IncludedCheckedBags {
  quantity: number;
}

export enum FareOption {
  Standard = "STANDARD",
}

export interface TravelerPricingPrice {
  currency: Currency;
  total:    string;
  base:     string;
}

export enum TravelerType {
  Adult = "ADULT",
  Child = "CHILD",
  HeldInfant = "HELD_INFANT",
}
